// Estrutura completa do projeto PsySimAI (com rotas, controllers, testes, CI/CD, simulação de IA e seed corrigido)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserConfig {
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  config   Config  @relation(fields: [configId], references: [id])
  configId String
  createdAt DateTime  @default(now())
  @@id([userId, configId])
}

model User {
  id       String     @id @default(uuid())
  name     String
  email    String     @unique
  password String
  sessions Session[]
  // relação N-N para Config
  userConfigs UserConfig[]
}

model Config {
  id        String    @id @default(uuid())
  name      String
  prompts   Prompt[]
  skillCategory     SkillCategory      @relation(fields: [skillCategoryId], references: [id])
  skillCategoryId   String
  difficultyLevel   DifficultyLevel    @relation(fields: [difficultyLevelId], references: [id])
  difficultyLevelId String
  // relação N-N para User
  userConfigs UserConfig[]
  createdAt DateTime  @default(now())
}

model Prompt {
  id                String             @id @default(uuid())
  config            Config             @relation(fields: [configId], references: [id])
  configId          String
  text              String
  order             Int
  expectedResponses ExpectedResponse[]
  sessions  		Session[] 
}

model ExpectedResponse {
  id       String  @id @default(uuid())
  prompt   Prompt  @relation(fields: [promptId], references: [id])
  promptId String
  text     String
  notes    String?
}

model SkillCategory {
  id          String   @id @default(uuid())
  name        String
  description String
  configs  Config[]
}

model DifficultyLevel {
  id          String     @id @default(uuid())
  name        String
  description String
  order       Int
  configs  Config[]
}

model Session {
  id                String          @id @default(uuid())
  user              User            @relation(fields: [userId], references: [id])
  userId            String
  prompt            Prompt          @relation(fields: [promptId], references: [id])
  promptId          String
  status            String
  startedAt         DateTime        @default(now())
  endedAt           DateTime?
  messages          Message[]
}

model Message {
  id        String   @id @default(uuid())
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId String
  sender    String
  content   String
  timestamp DateTime @default(now())
  isValid   Boolean?
  feedback  String?
  score     Int? @default(0)
}

